  -- ДЗ 9
 
  -- Задача 9.1.1
 
 
 -- Попробуем сделать транзакцию из таблицы users базы данных dz7.
 SELECT * FROM dz7.users;
 
CREATE DATABASE dz9;
use dz9;


 -- для этого создадим пустую таблицу с аналогичными столбцами, как и dz7.users
DROP TABLE IF EXISTS users911;
CREATE TABLE users911(
	id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(45) NOT NULL,
	birthday_at DATE DEFAULT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

START TRANSACTION;

INSERT INTO dz9.users911 SELECT * FROM dz7.users WHERE id = 1;

COMMIT;

SELECT * FROM users911;


 -- Задача 9.1.2

DROP TABLE products912;

CREATE TABLE products912 (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  catalog_id INT
); 

INSERT INTO products912 (id, name, catalog_id) VALUES (1, 'Интел', 1);
INSERT INTO products912 (id, name, catalog_id) VALUES (2, 'АМД', 1);
INSERT INTO products912 (id, name, catalog_id) VALUES (3, 'Эльбрус', 1);
INSERT INTO products912 (id, name, catalog_id) VALUES (4, 'MSI', 2);
INSERT INTO products912 (id, name, catalog_id) VALUES (5, 'ASUS', 2);
INSERT INTO products912 (id, name, catalog_id) VALUES (6, 'Gigabyte', 2);


DROP TABLE catalogs912;

CREATE TABLE catalogs912 (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100)
  ); 
 
INSERT INTO catalogs912 (id, name) VALUES (1, 'Процессоры');
INSERT INTO catalogs912 (id, name) VALUES (2, 'Материанские платы');
INSERT INTO catalogs912 (id, name) VALUES (3, 'Жесткие диски');

SELECT * FROM products912;

SELECT * FROM catalogs912;

CREATE OR REPLACE VIEW view_p_c (p_id, p_name, c_name) AS
	SELECT products912.id, 
		   products912.name, 
		   catalogs912.name
		FROM products912
		LEFT JOIN catalogs912 
			ON products912.catalog_id = catalogs912.id;

SELECT * FROM view_p_c;

-- Задача 9.1.3.

-- создадим две таблицы: В первой запишем даты из ДЗ, во второй просто все дни августа.

CREATE TABLE august_dz9 (created_at DATE);

INSERT INTO august_dz9 VALUES
	('2018-08-01'), ('2018-08-04'),
	('2018-08-16'), ('2018-08-17');

SELECT * FROM august_dz9;

CREATE TABLE august (created_at DATE);

INSERT INTO august VALUES
	('2018-08-01'), ('2018-08-02'), ('2018-08-03'), ('2018-08-04'), ('2018-08-05'),
	('2018-08-06'), ('2018-08-07'), ('2018-08-08'), ('2018-08-09'), ('2018-08-10'),
	('2018-08-11'), ('2018-08-12'), ('2018-08-13'), ('2018-08-14'), ('2018-08-15'),
	('2018-08-16'), ('2018-08-17'), ('2018-08-18'), ('2018-08-19'), ('2018-08-20'),
	('2018-08-21'), ('2018-08-22'), ('2018-08-23'), ('2018-08-24'), ('2018-08-25'),
	('2018-08-26'), ('2018-08-27'), ('2018-08-28'), ('2018-08-29'), ('2018-08-30'),
	('2018-08-31');

SELECT august.*,
 (SELECT '1' FROM august_dz9 WHERE august_dz9.created_at = august.created_at) AS Совпадение
FROM august;


-- Задача 9.1.4

DROP TABLE august914;
CREATE TABLE august914 (created_at DATE);

INSERT INTO august914 VALUES
	('2018-08-01'), ('2018-08-02'), ('2018-08-03'), ('2018-08-04'), ('2018-08-05'),
	('2018-08-06'), ('2018-08-07'), ('2018-08-08'), ('2018-08-09'), ('2018-08-10'),
	('2018-08-11'), ('2018-08-12'), ('2018-08-13'), ('2018-08-14'), ('2018-08-15'),
	('2018-08-16'), ('2018-08-17'), ('2018-08-18'), ('2018-08-19'), ('2018-08-20'),
	('2018-08-21'), ('2018-08-22'), ('2018-08-23'), ('2018-08-24'), ('2018-08-25'),
	('2018-08-26'), ('2018-08-27'), ('2018-08-28'), ('2018-08-29'), ('2018-08-30'),
	('2018-08-31');

SELECT * FROM august914;

DELETE FROM august914
	WHERE created_at IN (
		SELECT * FROM (
			SELECT * FROM august914
			ORDER BY created_at DESC
			LIMIT 5
		) AS deleted
	) ORDER BY created_at;	

SELECT * FROM august914;

-- Задача 9.2.1
SELECT Host, User FROM mysql.user;
-- создаем пользователя, которому доступно только чтение данных
DROP USER IF EXISTS 'reader'@'localhost';

CREATE USER 'reader'@'localhost' IDENTIFIED WITH sha256_password BY 'reader';

GRANT SELECT ON dz9.* TO 'reader'@'localhost';

SELECT Host, User FROM mysql.user;

-- а тут создадим пользователя, которому будут доступны все права в базе данных dz9
DROP USER IF EXISTS 'author'@'localhost';

CREATE USER 'author'@'localhost' IDENTIFIED WITH sha256_password BY 'author';

GRANT ALL ON dz9.* TO 'author'@'localhost';
GRANT GRANT OPTION ON dz9.* TO 'author'@'localhost';

SELECT Host, User FROM mysql.user;

-- Задача 9.2.2

DROP TABLE IF EXISTS accounts;

CREATE TABLE accounts (
	id SERIAL PRIMARY KEY,
	name VARCHAR(20),
	pass VARCHAR(20)
);

INSERT INTO accounts VALUES (1, 'user1', '1user');
INSERT INTO accounts VALUES (2, 'user2', '2user');
INSERT INTO accounts VALUES (3, 'user3', '3user');

SELECT * FROM accounts;

CREATE OR REPLACE VIEW username(acc_id, acc_name) AS 
	SELECT id, name FROM accounts;

SELECT * FROM username;

DROP USER IF EXISTS 'user_read'@'localhost';
CREATE USER 'user_read'@'localhost' IDENTIFIED WITH sha256_password BY '123';
GRANT SELECT ON dz9.username TO 'user_read'@'localhost';

SELECT Host, User FROM mysql.user;

-- Задача 9.3.1

DROP PROCEDURE IF EXISTS hello;
DELIMITER // 
CREATE PROCEDURE hello()
	BEGIN
		IF(CURTIME() BETWEEN '06:00:00' AND '12:00:00') THEN
			SELECT 'Доброе утро';
		ELSEIF(CURTIME() BETWEEN '12:00:00' AND '18:00:00') THEN
			SELECT 'Добрый день';
		ELSEIF(CURTIME() BETWEEN '18:00:00' AND '00:00:00') THEN
			SELECT 'Добрый вечер';
		ELSE
			SELECT 'Доброй ночи';
		END IF;
	END //
DELIMITER ;

CALL hello();

-- Задача 9.3.2

-- чтобы не создавать новую таблицу, используем из прошлых заданий, например products912.
-- там два текстовых поля нет, но можно использовать и другие, сути это не меняет, как я понимаю.
SELECT * FROM products912;


DROP TRIGGER IF EXISTS right_check;
DELIMITER //
CREATE TRIGGER right_check BEFORE INSERT ON products912
FOR EACH ROW 
	BEGIN
		IF(ISNULL(NEW.name) AND ISNULL(NEW.catalog_id)) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'NULL in name & catalog_id';
		END IF;
	END //
DELIMITER ;

DELETE FROM products912 WHERE id = 9;

INSERT INTO products912 (id, name, catalog_id) VALUES (7, NULL, 1); 

INSERT INTO products912 (id, name, catalog_id) VALUES (8, 'АМД', 1); 

INSERT INTO products912 (id, name, catalog_id) VALUES (9, NULL, NULL); 

SELECT * FROM products912;

-- Задача 9.3.3

-- Алгоритм вычисления числа Фибоначчи я взял из сети, честно признаюсь. 
-- Поэтому осталось его только записать в языке Mysql

DELIMITER //
CREATE FUNCTION fibo(value INT)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE Counter INT; 
	DECLARE One INT; 
	DECLARE Two INT; 
	SET Two = 1;
	IF value > 2 THEN
    	SET Counter = 3;
 		SET One = 1;
  		WHILE value >= Counter DO
 			SET Two = One + Two;
 	  		SET One = Two - One;
 	  		SET Counter = Counter + 1;
 		END WHILE;
   	END IF;
	RETURN Two;
END;
//
DELIMITER ;

SELECT fibo(10);